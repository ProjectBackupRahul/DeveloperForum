{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user \n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user \n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //  Login User  \n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / clear profile \n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["/home/rahul/MERN/devconnector/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert'\nimport {\n      REGISTER_SUCCESS,\n      REGISTER_FAIL,\n      USER_LOADED,\n      AUTH_ERROR,\n      LOGIN_SUCCESS,\n      LOGIN_FAIL,\n      LOGOUT,\n      CLEAR_PROFILE\n    } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n// Load user \nexport const loadUser = () => async dispatch =>{\n     if (localStorage.token){\nsetAuthToken(localStorage.token)\n     }\n      try {\n             const res = await axios.get('/api/auth');\n             dispatch({\n                 type: USER_LOADED,\n                 payload : res.data\n             });\n      } catch (error) {\n        dispatch({\n          type: AUTH_ERROR\n          });\n      }\n}\n// Register user \n export const register = ({name , email, password }) => async dispatch =>{\n     const config ={\n          headers:{\n               'Content-Type': 'application/json'\n          }\n     }\n        const body = JSON.stringify({name, email, password});\n        try {\n            const res = await axios.post('api/users',body,config);\n\n            dispatch({\n                   type:REGISTER_SUCCESS,\n                   payload: res.data\n            });\n            dispatch(loadUser()) ;\n        } catch(err){\n\n               const errors = err.response.data.errors;\n               if (errors){\n                    errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n               }\n               dispatch({\n               type: REGISTER_FAIL\n               });\n        }\n }\n\n  //  Login User  \n\n export const login = (email, password ) => async dispatch =>{\n     const config ={\n          headers:{\n               'Content-Type': 'application/json'\n          }\n     }\n        const body = JSON.stringify({email, password});\n\n        try {\n            const res = await axios.post('api/auth',body,config);\n\n            dispatch({\n                   type:LOGIN_SUCCESS,\n                   payload: res.data\n            });\n            dispatch(loadUser()) ;\n        } catch(err){\n\n               const errors = err.response.data.errors;\n               if (errors){\n               errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n               }\n               dispatch({\n               type: LOGIN_FAIL\n               });\n        }\n }\n // Logout / clear profile \n\nexport const logout = () => dispatch => {\n    dispatch({ type: LOGOUT }); \n    dispatch({ type: CLEAR_PROFILE });     \n }\n"]},"metadata":{},"sourceType":"module"}